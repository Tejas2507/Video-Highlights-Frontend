

```
Create a complete React + TypeScript + Vite frontend application with the following EXACT file structure and content:

### FILE STRUCTURE:
```
frontend-app/
├── index.html
├── src/
│   ├── App.tsx
│   ├── main.tsx
│   ├── components/
│   │   ├── FileUpload.tsx
│   │   ├── VideoProcessor.tsx
│   │   └── SpreadsheetEditor.tsx
│   └── types/
│       └── index.ts
├── package.json
└── vite.config.ts
```

### EXACT CONTENT FOR EACH FILE:

1. **package.json**:
```json
{
  "name": "video-highlight-generator",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.0.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0",
    "tailwindcss": "^3.0.0",
    "typescript": "^5.0.0",
    "vite": "^4.0.0"
  }
}
```

2. **vite.config.ts**:
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
})
```

3. **src/types/index.ts**:
```typescript
export interface ApiResponse {
  message: string;
  spreadsheetId: string;
  spreadsheetUrl: string;
}

export interface UploadState {
  stage: 'upload' | 'processing' | 'editing' | 'generating' | 'complete';
  selectedFile: File | null;
  isProcessing: boolean;
  isGenerating: boolean;
  error: string | null;
  apiResponse: ApiResponse | null;
  downloadUrl: string | null;
}
```

4. **src/components/FileUpload.tsx** - A drag & drop file upload component
5. **src/components/VideoProcessor.tsx** - Handles API calls for video processing
6. **src/components/SpreadsheetEditor.tsx** - EMBEDDED Google Sheets editor using iframe
7. **src/App.tsx** - Main component with state management and workflow
8. **src/main.tsx** - React DOM rendering

### CRITICAL FUNCTIONALITY:

**EMBEDDED SPREADSHEET REQUIREMENT**: 
In SpreadsheetEditor.tsx, use Google Sheets embed URL format:
`https://docs.google.com/spreadsheets/d/SPREADSHEET_ID/edit?usp=sharing&embed=true`
This must display the spreadsheet WITHIN my app, not redirect externally.

**WORKFLOW**:
1. Upload video → Show loading → Display embedded spreadsheet editor → Edit in-app → Generate final video → Download

**API ENDPOINTS**:
- POST to: http://localhost:5678/webhook/bdef75c6-0881-4a7b-b3e8-1ed19306512c
- POST to: http://localhost:5678/webhook/c00db252-0e0e-484c-94dd-c3f405825c10

**STYLING**: Use Tailwind CSS with dark theme similar to previous working version.

Provide the complete, working code for ALL files. The embedded spreadsheet editing is NON-NEGOTIABLE.
```

This prompt now:
- ✅ Specifies EXACT file structure
- ✅ Provides EXACT content for key config files
- ✅ Defines TypeScript interfaces
- ✅ Specifies the critical embedded spreadsheet requirement with exact URL format
- ✅ Details the complete workflow
- ✅ Includes all API endpoints
- ✅ Specifies styling requirements

No more ambiguity! Replit will have to provide exactly what we need.